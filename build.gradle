import com.github.spotbugs.snom.Confidence

plugins {
	id 'java-library'
	id 'java-gradle-plugin'
	id 'pmd'
	id 'checkstyle'
	id 'maven-publish'
	alias libs.plugins.spotbugs apply true
	alias libs.plugins.spotless apply true
	alias libs.plugins.gradle.plugin.publish apply true
}

group = 'com.github.oguzdem'
version = project.findProperty("version")

repositories {
	mavenCentral()
}

dependencies {
	implementation libs.lombok
	annotationProcessor libs.lombok

	implementation libs.google.auto.service
	implementation libs.apache.commons.lang3
	implementation libs.google.guava
	implementation libs.jackson.core
	implementation libs.jackson.databind
	implementation libs.jackson.datatype.jsr310
	implementation libs.jackson.annotations
	implementation libs.logback.classic
	implementation libs.swagger.parser
	implementation libs.forge.roaster.api
	implementation libs.hibernate.validator
	implementation libs.expressly
	implementation libs.picocli
	runtimeOnly libs.forge.roaster.jdt

	testImplementation libs.junit.jupiter.api
	testImplementation libs.junit.jupiter.params
	testImplementation libs.mockito.core
	testImplementation libs.mockito.junit.jupiter

	testRuntimeOnly libs.junit.platform.launcher
	testRuntimeOnly libs.junit.jupiter.engine
	testCompileOnly libs.lombok
	testAnnotationProcessor libs.lombok

	compileOnlyApi gradleApi()
}

test {
	useJUnitPlatform()
}

pmd {
	toolVersion = "7.3.0"
	ruleSetFiles = files("${rootDir}/config/pmd/pmd.xml")
	consoleOutput = true
}

checkstyle {
	toolVersion = '10.17.0'
	maxWarnings = 0
	configFile file("${rootDir}/config/checkstyle/google_checks.xml")
}

spotbugs {
	includeFilter.set(file("${rootDir}/config/spotbugs/spotbugs-include.xml"))
	excludeFilter.set(file("${rootDir}/config/spotbugs/spotbugs-exclude.xml"))
	reportLevel = Confidence.valueOf('DEFAULT')
	showProgress = true
}

spotless {
	format 'misc', {
		target '*.gradle', '.gitattributes', '.gitignore'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}

	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat()
		formatAnnotations()
	}
}

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/oguzdemirbasci/simple-openapi-generator")
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
	publications {
		gpr(MavenPublication) {
			from(components.java)
		}
	}
}

gradlePlugin {
	website = 'https://github.com/oguzdemirbasci/simple-openapi-generator'
	vcsUrl = 'https://github.com/oguzdemirbasci/simple-openapi-generator'

	plugins {
		greetingsPlugin {
			id = 'simple-openapi-generator'
			displayName = 'Simple Openapi Generator'
			description = 'Simple Openapi Generator Gradle Plugin'
			tags.set(['openapi', 'schema', 'model', 'pojo', 'generator'])
			implementationClass = 'com.github.oguzdem.openapi.generator.gradleplugin.GenerateOpenApiModelsPlugin'
		}
	}
}

tasks.withType(Javadoc).configureEach {
	options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.compileJava.dependsOn spotlessApply
