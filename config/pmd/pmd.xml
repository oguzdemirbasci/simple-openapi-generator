<?xml version="1.0"?>
<ruleset name="PMD Ruleset"
  xmlns="http://pmd.sf.net/ruleset/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
  xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>Rules for Java Best Practices</description>
  <!-- For details, see http://pmd.sourceforge.net/rules/index.html -->
  <!-- <rule ref="rulesets/java/basic.xml"/> -->
  <rule ref="category/java/errorprone.xml/JumbledIncrementer"/>
  <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>
  <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode"/>
  <rule ref="category/java/multithreading.xml/DoubleCheckedLocking"/>
  <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock"/>
  <rule ref="category/java/errorprone.xml/UnconditionalIfStatement"/>
  <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray"/>
  <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
  <rule ref="category/java/errorprone.xml/MisplacedNullCheck"/>
  <rule ref="category/java/errorprone.xml/BrokenNullCheck"/>
  <rule ref="category/java/performance.xml/BigIntegerInstantiation"/>
  <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues"/>
  <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators"/>
  <rule ref="category/java/multithreading.xml/DontCallThreadRun"/>
  <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices"/>

  <!-- <rule ref="rulesets/java/unnecessary.xml"/> -->
  <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable"/>
  <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryImport"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
  <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals"/>

  <!-- <rule ref="rulesets/java/braces.xml"/> -->
  <rule ref="category/java/codestyle.xml/ControlStatementBraces"/>

  <!-- <rule ref="rulesets/java/clone.xml"/> -->
  <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic"/>
  <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable"/>
  <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName"/>
  <rule ref="category/java/errorprone.xml/ProperCloneImplementation"/>

  <!-- <rule ref="rulesets/codesize.xml"/>-->

  <!-- <rule ref="rulesets/java/controversial.xml"/> -->
  <rule ref="category/java/codestyle.xml/UnnecessaryConstructor"/>
  <rule ref="category/java/errorprone.xml/SuspiciousOctalEscape"/>
  <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode"/>

  <!-- <rule ref="rulesets/java/coupling.xml"/> -->
  <rule ref="category/java/bestpractices.xml/LooseCoupling"/>

  <!-- <rule ref="rulesets/java/design.xml"/> -->
  <rule ref="category/java/design.xml/SimplifyBooleanExpressions"/>
  <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault"/>
  <rule ref="category/java/design.xml/SwitchDensity"/>
  <rule ref="category/java/design.xml/FinalFieldCouldBeStatic"/>
  <rule ref="category/java/errorprone.xml/NonStaticInitializer"/>
  <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt"/>
  <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement"/>
  <rule ref="category/java/errorprone.xml/ComparisonWithNaN"/>
  <rule ref="category/java/errorprone.xml/EqualsNull"/>
  <rule ref="category/java/errorprone.xml/InstantiationToGetClass"/>
  <rule ref="category/java/errorprone.xml/IdempotentOperations"/>
  <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
  <rule ref="category/java/errorprone.xml/ImplicitSwitchFallThrough"/>
  <rule ref="category/java/design.xml/SimplifyConditional"/>
  <rule ref="category/java/multithreading.xml/NonThreadSafeSingleton"/>
  <rule ref="category/java/bestpractices.xml/ConstantsInInterface"/>
  <rule ref="category/java/multithreading.xml/UnsynchronizedStaticFormatter"/>
  <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty"/>
  <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>

  <!-- <rule ref="rulesets/java/finalizers.xml"/> -->
  <rule ref="category/java/errorprone.xml/AvoidCallingFinalize"/>
  <rule ref="category/java/errorprone.xml/EmptyFinalizer"/>
  <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize"/>

  <!-- <rule ref="rulesets/java/logging-java.xml"/> -->
  <rule ref="category/java/errorprone.xml/MoreThanOneLogger"/>
  <rule ref="category/java/bestpractices.xml/SystemPrintln"/>
  <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace"/>

  <!-- <rule ref="rulesets/java/migrating.xml"/> -->
  <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier"/>
  <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier"/>
  <!-- <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach"/> -->
  <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator"/>
  <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap"/>
  <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList"/>

  <!-- <rule ref="rulesets/java/naming.xml"/> -->
  <rule ref="category/java/codestyle.xml/ClassNamingConventions"/>
  <rule ref="category/java/codestyle.xml/FieldNamingConventions"/>
  <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions"/>
  <rule ref="category/java/codestyle.xml/LongVariable">
    <properties>
      <property name="minimum" value="40"/>
    </properties>
  </rule>

  <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>
  <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass"/>
  <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName"/>
  <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName"/>
  <rule ref="category/java/codestyle.xml/NoPackage"/>
  <rule ref="category/java/codestyle.xml/PackageCase"/>

  <!-- <rule ref="rulesets/java/optimizations.xml"/> -->
  <rule ref="category/java/performance.xml/UseArrayListInsteadOfVector"/>
  <rule ref="category/java/performance.xml/UseArraysAsList"/>
  <rule ref="category/java/performance.xml/AvoidArrayLoops"/>

  <!-- <rule ref="rulesets/java/strictexception.xml"/> -->
  <rule ref="category/java/design.xml/ExceptionAsFlowControl"/>
  <rule ref="category/java/design.xml/AvoidRethrowingException"/>
  <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>
  <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally"/>
  <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException"/>
  <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation"/>

  <!-- <rule ref="rulesets/java/strings.xml"/> -->
  <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar"/>
  <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange"/>
  <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings"/>
  <rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse"/>
  <rule ref="category/java/performance.xml/InefficientEmptyStringCheck"/>
  <rule ref="category/java/performance.xml/InefficientStringBuffering"/>
  <rule ref="category/java/performance.xml/StringInstantiation"/>
  <rule ref="category/java/performance.xml/StringToString"/>
  <rule ref="category/java/performance.xml/UseIndexOfChar"/>
  <rule ref="category/java/performance.xml/UselessStringValueOf"/>
  <rule ref="category/java/performance.xml/UseStringBufferLength"/>

  <!-- <rule ref="rulesets/java/typeresolution.xml"/> -->
  <rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>
  <rule ref="category/java/bestpractices.xml/UnusedFormalParameter"/>
</ruleset>
